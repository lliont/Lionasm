;*       Tiny Basic port for Lion System
;*
;*         ported by Theodoulos Liontakis 2016
;*
;*                       from
;*                               
;*                   Li-Chen Wang's
;*
;*                   8080 tiny basic 
;*
;* @copyleft
;* all wrongs reserved
;*
		ORG     8192   ;Ram
		JMP		START	
XX		DB	0
YY		DB	0
TITLE		TEXT	"Tiny Basic for Lion System"
		DB	13
how		TEXT  "how?"
		DB	$0d
OK		TEXT	"OK"
		DB	13
what		TEXT    "what?"
		DB	$0d
sorry		TEXT    "sorry"
		DB    $0d
		DB	0

START:	
		MOV	A1,STACK 
		SETSP	A1
		MOV.B	(65169),45  ; Set line 26 color
		MOV	A2,$0019 ; Set INITIAL POS 
		MOV	(XX),A2
		MOV	A3,TITLE
		JSR	PRTSTG
		MOV	(TXTUNF),TXTBGN

RSTART:	MOV	A0,STACK
		SETSP	A0
		MOVI	A1,0
		MOV	(CURRNT),A1
		JSR	CRLF
		MOV   A3,OK
		MOVI.B A0,0
		JSR	prtstg
_st3:
		MOV	(LOPVAR),A1
		MOV	(STKGOS),A1
		MOV.B	A0,'>'
		JSR	GETLN
		PUSH	A4
		MOV 	A3,BUFFER
		JSR	TSTNUM
		MOVHL	A0,0
		JSR	IGNBLNK
		OR	A1,A1
		POP	A2
		JZ	DIRECT
		DEC	A3
		DEC	A3
		MOV	A0,A1
		MOV	A4,A3
		JSR	STOSW
		PUSH	A2
		PUSH  A3
		MOV	A0,A2
		SUB	A0,A3
		PUSH	A0
		JSR	FNDLN
		PUSH	A3
		JNZ	_ST4
		PUSH	A3
		JSR	FNDNXT

		POP	A2
		MOV	A1,(TXTUNF)
		JSR	MVUP
		MOV	A1,A2
		MOV	(TXTUNF),A1
_ST4:		
		POP	A2
		MOV	A1,(TXTUNF)

		POP	A0
		PUSH	A1
		CMP.B	A0,3
		JZ	RSTART
		ADD	A0,A1
		MOV	A1,A0		
		MOV	A3,TXTEND
		CMP	A1,A3
		JNC	QSORRY
		MOV	(TXTUNF),A1
		POP	A3
		JSR	MVDOWN
		POP	A3
		POP	A1
		JSR	MVUP
		JMP	_ST3

TSTV:		
		MOVHL	A0,64
		JSR	IGNBLNK
		JC	RET01
TSTV1:	
		JNZ	TV1
		JSR	PARN
		ADD	A1,A1
		JC	QHOW
		PUSH	A3
		XCHG	A1,A3
		JSR	SIZE
		CMP	A1,A3
		JC	ASORRY
		MOV 	A1,TXTEND
		SUB	A1,A3
		POP	A3
RET01:	
		RET

TV1:		CMP.B	A0,'Z'  ; TEST VARIABLE
		JA	RET22
		CMP.B	A0,'A'
		JC	RET2
		INC	A3
TV1A:	
		MOV	A1,VARBGN
		SUB.B	A0,65
		MOVHL	A0,0
		SRA	A0,1
		ADD	A1,A0
RET2:		
		RET	
RET22:	
		CMP	A0,255
		RET

;----- TSTNUM

TSTNUM:
		MOVI	A1,0
		MOVHL	A2,A1
		MOVHL	A0,0
		JSR	IGNBLNK
TN1:
		CMP.B	A0,'0'
		JC	RET2
		CMP.B A0,':'
		JNC	RET2
		MOV.B	A0,$F0
		SWAP	A1
		AND.B	A0,A1
		SWAP	A1
		JNZ	QHOW
		ADD	A2,$0100
		PUSH	A2

		MOVI	A2,10
		;MULU.B A0,A2 
		MOV	A0,8   ;
		INT	4      ; Multiplcation A1*A2 res in A1

		MOVI	A0,0
		MOV	A4,A3
		JSR	LODSB
		SUB.B	A0,'0'
		MOVHL	A0,0
		ADD	A1,A0
		POP	A2
		JSR	LODSB
		PUSH	SR
		INC	A3
		POP	SR
		JP	TN1
QHOW:
		PUSH	A3
AHOW:	
		MOV	A3,HOW
		JMP	ERROR

;--------  tables ----
tab1:	
	TEXT	"LIS"
	DB	'T'+128
	DA	LIST
	TEXT "FIN"
	DB	'D'+128
	DA	FIND
	TEXT	"NE"
	DB	'W'+128
	DA	NEW
	TEXT	"RU"
	DB	'N'+128
	DA	RUN
	TEXT	"BY"
	DB	'E'+128
	DA	BYE
TAB2	TEXT	"NEX"
	DB	'T'+128
	DA	NEXT
	TEXT	"LE"
	DB	'T'+128
	DA	LET
	TEXT	"OU"
	DB	'T'+128
	DA	OUTCMD
	TEXT	"POK"
	DB	'E'+128
	DA	POKE
	TEXT	"I"
	DB	'F'+128
	DA	IFF
	TEXT	"GOT"
	DB	'O'+128
	DA	GOTO
	TEXT	"GOSU"
	DB	'B'+128
	DA	GOSUB
	TEXT	"RETUR"
	DB	'N'+128
	DA	RETURN
	TEXT	"RE"
	DB	'M'+128
	DA	REM
	TEXT	"FO"
	DB	'R'+128
	DA	FOR
	TEXT	"INPU"
	DB	'T'+128
	DA	INPUT
	TEXT	"PRIN"
	DB	'T'+128
	DA	PRINT
	TEXT	"STO"
	DB	'P'+128
	DA	STOP
	TEXT	"COLO"
	DB	'R'+128
	DA	COLOR
	TEXT	"BEE"
	DB	'P'+128
	DA	BEEP
	DB 	128
	DA	DEFLT

TAB4	TEXT	"RN"
	DB	'D'+128
	DA	RND
	TEXT	"IN"
	DB	'P'+128
	DA	INP
	TEXT	"PEE"
	DB	'K'+128
	DA	PEEK
	TEXT	"US"
	DB	'R'+128
	DA	USR
	TEXT	"AB"
	DB	'S'+128
	DA	MYABS
	TEXT	"SIZ"
	DB	'E'+128
	DA	SIZE
	TEXT	"STAC"
	DB	'K'+128
	DA	ST_CMD
	DB	128
	DA	XP40

TAB5	DB	'T', 'O'+128
	DA	FR1
	DB	128
	DA	QWHAT

TAB6	TEXT	"STE"
	DB	'P'+128
	DA	FR2
	DB	128
	DA	FR3
TAB8	DB	'>'
	DB 	'='+128
	DA	XP11
	DB	'#'+128
	DA	XP12
	DB	'>'+128
	DA	XP13
	DB	'='+128
	DA	XP15
	DB	'<'
	DB	'='+128
	DA	XP14
	DB	'<'+128
	DA	XP16
	DB	128	
	DA	XP17


;----------TEMP

outio:
 	out $FFFF,A1
 	ret

INPIO:
	IN	A1,$FFFF
	RET

OUTCMD:
	JSR	EXP
	MOV	A0,OUTIO
	INC 	A0
	INC	A0
	MOV	(A0),A1
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	JSR	EXP
	JSR	OUTIO
	JMP	FINISH

INP:
	JSR	PARN
	MOV	A0,INPIO
	INC	A0
	INC	A0
	MOV	(INPIO),A1
	JSR	INPIO
	JMP	FINISH

USR:
	PUSH	A2
	MOVHL	A0,'('
	JSR	IGNBLNK
	JSR	EXP
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	PASPRM
	PUSH	A3
	MOV	A3,USRET
	PUSH	A3
	PUSH	A3
	RET
PASPRM:
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	USRET1
	PUSH	A2
	JSR	EXP
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	USRET1
	POP	A2
	PUSH	A3
	MOV	A3,USRET
	PUSH	A3
	PUSH	A2
	RET
USRET:
	POP	A3
USRET1:
	POP	A2
	RET
QWT:
	JMP	QWHAT

DIRECT:
	MOV	A1,TAB1
	DEC	A1
EXEC:	
EX0:
	MOVHL	A0,0
	JSR	IGNBLNK
	PUSH	A3
	MOV	A4,A3
EX1:
	JSR	LODSB
	INC	A3
	CMP.B	A0,'.'   
	JZ	EX4
	INC	A1
	MOVHL	A0,(A1)
	AND	A0,$7FFF
	CMPHL	A0
	JZ	EX2
EX0A:
	CMP.B	(A1),128
	JNC	EX0B
	INC	A1
	JMP	EX0A
EX0B:
	ADD	A1,3
	BTST	A1,0
	JZ	ALI2
	INC	A1
ALI2: CMP.B (A1),128
	JZ	EX3A
	DEC	A1
	POP	A3
	JMP	EX0
EX4:
	INC	A1
	CMP.B	(A1),128
	JC	EX4
	JMP	EX3
EX3A:
	DEC	A4
	JMP	EX3
EX2:
	CMP.B	(A1),128
	JC	EX1
EX3:
	INC	A1
	BTST	A1,0   ; ALIGN TO EVEN ADDRESS
	JZ	ALIG
	INC	A1
ALIG:	POP	A0
	MOV	A3,A4	
	JMP 	(A1)
;--------------------

NEW:
	MOV (TXTUNF),TXTBGN
STOP:
	JSR	ENDCHK
	JMP	RSTART

RUN:
	JSR	ENDCHK
	MOV	A3,TXTBGN

RUNNXL:
	MOVI	A1,0
	JSR	FNDLNP
	JNC	RUNTSL
	JMP	RSTART

RUNTSL:
	XCHG	A1,A3
	MOV	(CURRNT),A1
	XCHG	A1,A3
	INC	A3
	INC	A3
RUNSML:
	JSR	CHKIO
	MOV	A1,TAB2
	DEC	A1
	JMP	EXEC

GOTO:
	JSR	EXP
	PUSH	A3
	JSR	ENDCHK
	JSR	FNDLN
	JZ	GT1
	JMP	AHOW
GT1:	POP	A0
	JMP	RUNTSL

BYE:
	JMP START

; ----------- LIST 
LIST:
	JSR	TSTNUM
	JSR	ENDCHK
	JSR	FNDLN
LS1:
	JNC	LS2
	JMP	RSTART
LS2:
	JSR	PRTLN
	JSR	CHKIO
	JSR	FNDLNP
	JMP	LS1

FIND:
	JSR	TSTNUM
	JSR	ENDCHK
	JSR	FNDLN
	JC	RSTART
	JSR	PRTLN
	JMP	_ST3


PRINT:
	MOVI.B A2,6
	MOVHL	A0,59
	JSR	IGNBLNK
	JNZ	PR2
	JSR	CRLF
	JMP	RUNSML
PR2:
	MOVHL	A0,13
	JSR	IGNBLNK
	JNZ	PR0
	JSR	CRLF
	JMP	RUNNXL
PR0:	
	MOVHL	A0,'#'
	JSR	IGNBLNK
	JNZ	PR1
	JSR	EXP
	MOV.B	A2,A1
	JMP	PR3
PR1:
	JSR	QTSTG
	JMP	PR8
PR3:
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	PR6
	JSR	FIN
	JMP	PR0
PR6:
	JSR	CRLF
	JMP	FINISH
PR8:
	JSR	EXP
	PUSH	A2
	JSR	PRTNUM
	POP	A2
	JMP	PR3

;--------------  GOSUB

GOSUB:
	JSR	_PUSHA
	JSR	EXP
	PUSH	A3
	JSR	FNDLN
	JNZ	AHOW
	MOV	A1,(CURRNT)
	PUSH	A1
	MOV	A1,(STKGOS)
	PUSH	A1
	MOVI	A1,0
	MOV	(LOPVAR),A1
	GETSP	A0
	ADD	A1,A0
	MOV	(STKGOS),A1
	JMP	RUNTSL
RETURN:
	JSR	ENDCHK
	MOV	A1,(STKGOS)
	OR	A1,A1
	JZ	QWHAT
	SETSP	A1
	POP	A1
	MOV	(STKGOS),A1
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
	JSR	_POPA
	JMP 	FINISH

; ----------for

FOR:	JSR	_PUSHA
	JSR	SETVAL
	DEC	A1
	MOV	(LOPVAR),A1
	MOV	A1,TAB5
	DEC	A1
	JMP	EXEC
FR1:
	JSR	EXP
	MOV	(LOPLMT),A1
	MOV	A1,TAB6
	DEC	A1
	JMP	EXEC
FR2:
	JSR	EXP
	JMP	FR4
FR3:
	MOVI	A1,1
FR4:
	MOV	(LOPINC),A1
FR5:
	MOV	A1,(CURRNT)
	MOV	(LOPLN),A1
	XCHG	A1,A3
	MOV	(LOPPT),A1
	MOVI	A2,10
	MOV	A1,(LOPVAR)
	XCHG	A3,A1
	MOV	A1,A2
	GETSP	A0
	ADD	A1,A0
	JMP	FR7A
FR7:
	ADD	A1,A2
FR7A:
	MOV	A0,(A1)
	OR	A0,A0
	JZ	FR8
	CMP	A0,A3
	JNZ	FR7
	XCHG	A3,A1
	MOV	A1,0
	GETSP	A0
	ADD	A1,A0
	MOV	A2,A1
	MOVI	A1,10
	ADD	A1,A3
	JSR	MVDOWN
	SETSP	A1
FR8:
	MOV	A1,(LOPPT)
	XCHG	A1,A3
	JMP 	FINISH
NEXT:
	JSR	TSTV
	JC	QWHAT
	MOV	(VARNXT),A1
NX0:
	PUSH	A3
	XCHG	A3,A1
	MOV	A1,(LOPVAR)
	MOVLH	A0,A1
	OR.B	A0,A1
	JZ	AWHAT
	CMP	A3,A1
	JZ	NX3
	POP	A3
	JSR	_POPA
	MOV	A1,(VARNXT)
	JMP	NX0
NX3:
	MOVHL	A3,(A1)
	INC	A1
	MOV.B	A3,(A1)
	MOV	A1,(LOPINC)
	PUSH	A1
	ADD	A1,A3
	XCHG	A3,A1
	MOV	A1,(LOPVAR)
	SWAP	A3
	MOV.B	(A1),A3
	INC	A1
	SWAP 	A3
	MOV.B	(A1),A3
	MOV	A1,(LOPLMT)
	POP	A0
	SWAP	A0
	OR 	A0,A0
	JP	NX1
	XCHG	A1,A3
NX1:
	JSR	CKHLDE
	POP	A3
	JC	NX2
	MOV	A1,(LOPLN)
	MOV	(CURRNT),A1
	MOV	A1,(LOPPT)
	XCHG	A3,A1
	JMP 	FINISH
NX2:
	JSR	_POPA
	JMP 	FINISH	

; ------------ EXPRES

SIZE:
	MOV	A1,(TXTUNF)
	PUSH	A3
	XCHG	A1,A3
SIZEA:
	MOV	A1,TXTEND  ;VARBGN
	SUB	A1,A3
	POP	A3
RET10:
	RET

; ------------ DIVIDE

DIVIDE:  ; INT 4/9 Div A2 by A1 res in A1,A0
	PUSH	A3
	PUSH	A1
	MOV	A1,A3
	POP	A2
	MOVI	A0,9
	INT	4
	MOV	A2,A1
	MOV	A1,A0
	MOV	A0,A2
	POP	A3
	RET
	
CHKSGN:
	OR	A1,A1
	JP	RET11
CHGSGN:
	NOT	A1
	INC	A1
	SWAP	A2
	XOR.B	A2,128
	SWAP	A2
RET11:
	RET

CKHLDE:
	MOVLH	A0,A1
	SWAP	A3
	XOR.B	A0,A3
	SWAP	A3
	JP	CK1
	PUSH	A3
	MOV	A3,A1
	POP	A1
CK1:
	CMP	A1,A3
	RET

;---- GETVAL FIN

SETVAL:
	JSR	TSTV
	JC	QWHAT
	PUSH	A1
	MOVHL	A0,'='
	JSR	IGNBLNK
	JNZ	SV1
	JSR	EXP
	MOV	A2,A1
	POP	A1
	SWAP	A2
	MOV.B	(A1),A2
	INC	A1
	SWAP	A2
	MOV.B	(A1),A2
	RET
SV1:
	JMP	QWHAT

FIN:
	MOVHL	A0,59
	JSR	IGNBLNK
	JNZ	FI1
	POP	A0
	JMP	RUNSML
FI1:
	MOVHL	A0,13
	JSR	IGNBLNK
	JNZ	FI2
	POP	A0
	JMP	RUNNXL
FI2:
	RET

ENDCHK:
	MOVHL	A0,13
	JSR	IGNBLNK
	JZ	FI2
QWHAT:
	PUSH	A3
AWHAT:
	MOV	A3,WHAT
ERROR:
	SUB.B	A0,A0
	JSR	PRTSTG
	POP	A3
	MOV	A1,(CURRNT)
	CMP	A1,0
	JZ	RSTART
	MOV	A4,A1
	JSR	LODSW
	OR	A0,A0
	JN	INPERR
	JSR	FNDLN
	MOV	A3,A1
	JSR	PRTLN
	POP	A2
ERR2:
	JMP	RSTART
QSORRY:
	PUSH	A3
ASORRY:
	MOV	A3,SORRY
	JMP	ERROR
;-----

REM:
	MOVI	A1,0
	JMP	IFF1A

IFF:
	JSR	EXP
IFF1A:
	CMP	A1,0
	JNZ	RUNSML
	JSR	FNDSKP
	JNC	RUNTSL
	JMP	RSTART

INPERR:
	MOV	A1,(STKINP)
	SETSP	A1
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
	POP	A3

INPUT:
IP1:
	PUSH	A3
	JSR	QTSTG
	JMP	IP2
	JSR	TSTV
	JC	IP4
	JMP	IP3
IP2:
	PUSH	A3
	JSR	TSTV
	JNC	IP2A
	JMP	QWHAT
IP2A:
	MOV	A4,A3
	JSR	LODSB
	MOV.B	A2,A0
	SUB.B	A0,A0
	MOV	A4,A3
	JSR	STOSB
	POP	A3
	JSR	PRTSTG
	MOV.B	A0,A2
	DEC	A3
	MOV	A4,A3
	JSR	STOSB
IP3:
	PUSH	A3
	XCHG	A1,A3
	MOV	A1,(CURRNT)
	PUSH	A1
	MOV	A1,$FFFF      ;IP1
	MOV	(CURRNT),A1
	GETSP	A0
	MOV	(STKINP),A0
	PUSH	A3
	MOV.B	A0,':'
	JSR	GETLN
IP3A:
	MOV	A3,BUFFER
	JSR	EXP
	NOP              ;jsr	endchk
	POP	A3
	XCHG	A1,A3
	MOV	(A1),A3
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
IP4:
	POP	A0
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	IP5
	JMP	IP1
IP5:
	JMP 	FINISH
	

DEFLT:
	MOV	A4,A3
	JSR	LODSB
	CMP.B	A0,13
	JZ	LT1

LET:
	JSR	SETVAL
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	LT1
	JMP	LET
LT1:	
	JMP 	FINISH
;-----
EXP:	JSR	EXPR2
	PUSH	A1
EXPR1:
	MOV	A1,TAB8
	DEC	A1
	JMP 	EXEC
XP11:
	JSR	XP18
	JC	RET4
	MOV.B	A1,A0
	RET
XP12:
	JSR	XP18
	JZ	RET4
	MOV.B	A1,A0
RET4:
	RET
XP13:
	JSR	XP18
	JZ	RET5
	JC	RET5
	MOV.B	A1,A0
RET5:
	RET
XP14:
	JSR	XP18
	MOV.B	A1,A0
	JZ	RET6
	JC	RET6
	MOVLH	A1,A1
RET6:
	RET
XP15:
	JSR	XP18
	JNZ	RET7
	MOV.B A1,A0
RET7:
	RET
XP16:
	JSR	XP18
	JNC	RET8
	MOV.B	A1,A0
RET8:
	RET
XP17:
	POP	A1
	RET
XP18:
	MOV.B	A0,A2
	POP	A1
	POP	A2
	PUSH	A1
	PUSH	A2
	MOV.B	A2,A0
	JSR	EXPR2
	XCHG	A1,A3
	POP	A0
	PUSH	A1
	MOV	A1,A0
	JSR	CKHLDE
	POP	A3
	MOVI	A1,0
	MOVI.B A0,1
	RET

EXPR2:
	MOVHL	A0,'-'
	JSR	IGNBLNK
	JNZ	XP21
	MOVI	A1,0
	JMP	XP26
XP21:
	MOVHL	A0,'+'
	JSR	IGNBLNK
XP22:
	JSR	EXPR3
XP23:
	MOVHL	A0,'+'
	JSR	IGNBLNK
	JNZ	XP25
	PUSH	A1
	JSR	EXPR3
XP24:
	XCHG	A1,A3
	POP	A0
	PUSH	A1
	MOV	A1,A0
	ADD	A1,A3
	POP	A3
	JO	XP24A
	JMP	XP23
XP24A:
	JMP	QHOW
XP25:
	MOVHL	A0,'-'
	JSR	IGNBLNK
	JNZ	RET9
XP26:
	PUSH	A1
	JSR	EXPR3
	JSR	CHGSGN
	JMP	XP24

EXPR3:
	JSR	EXPR4
XP31:
	MOVHL	A0,'*'
	JSR	IGNBLNK
	JNZ	XP34
	PUSH	A1
	JSR	EXPR4
	XCHG	A1,A3
	POP	A0
	PUSH	A1
	;MUL.B A0,A3 ; ****************
		PUSH	A2
		MOV	A1,A0
		MOV	A2,A3
		MOV	A0,8   ;
		INT	4      ; Multiplcation A1*A2 res in A1
		MOV	A0,A1
		POP	A2
	JO	XP32
	MOV	A1,A0
	JMP	XP35
XP34:
	MOVHL	A0,'/'
	JSR	IGNBLNK
	JNZ	RET9
	PUSH	A1
	JSR	EXPR4
	XCHG	A1,A3
	POP	A0
	PUSH	A1
	MOV	A1,A0
	OR	A3,A3
	JNZ	XP34A
XP32:
	JMP	AHOW
XP34A:
	JSR	DIVIDE
	MOV	A1,A2
	MOVI	A2,6
XP35:
	POP	A3
	JMP	XP31

EXPR4:
	MOV	A1,TAB4
	DEC	A1
	JMP	EXEC
XP40:   		
	JSR	TSTV  ; VARIABLE ?
	JC	XP41
	MOVHL	A0,(A1)
	INC	A1
	MOV.B	A0,(A1)
	MOV	A1,A0
RET9:
	RET
XP41:	
	JSR	TSTNUM	; NUMBER ?
	MOVLH A0,A2
	OR.B	A0,A0
	JNZ	XP42
PARN:
	MOVHL	A0,'('
	JSR	IGNBLNK
	JNZ	PARN1
	JSR	EXP
PARN1:
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	XP43
XP42:
	RET
XP43:
	JMP	QWHAT

	
MYABS:
	JSR	PARN
	JSR	CHKSGN
	OR	A0,A1
	JP	RET10
	JMP	QHOW

;-----  OUT POKE

COLOR:
	JSR	EXP
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	PUSH	A1
	JSR	EXP
	MOV.B	A0,A1
	POP	A1
	ADD	A1,65144
	MOV.B	(A1),A0
	JMP 	FINISH


BEEP:
	JSR	EXP
	OUT	8,A1
	JMP 	FINISH



POKE:
	JSR	EXP
	PUSH	A1
	MOVHL	A0,44
	JSR	IGNBLNK
	JZ	POK1
	JMP	QWHAT
POK1:
	JSR	EXP
	MOV.B	A0,A1
	POP	A1
	MOV.B	(A1),A0
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	POK2
	JMP	POKE
POK2:
	JMP 	FINISH

PEEK:
	JSR	PARN
	MOV.B	A1,(A1)
	MOVHL	A1,0
	RET

RND:	JSR	PARN
	OR	A2,A2
	JP	RND1
	JNZ	RND1
	JMP	QHOW
RND1:
	
	RET

ST_CMD:
	GETSP	A1
	RET


;----- GETLN

GETLN:
		jsr	chrout
		push	a1
		mov	a4,BUFFER  ; a4<->di
GL1:
		MOVI	A0,0
		INT	4           ; Get keyboard code
		BTST	A0,1        ; if availiable
		JZ	GL1
		MOV	A0,A1      ; CHAR IN A0
		CMP.B	A0,97
		JC	SKP2
		CMP.B	A0,122
		JA	SKP2
		AND.B	A0,$DF        ; UPPER CASE 
SKP2:	      CMP.B A0,8       ; BS
		JNZ   gl2
		CMP	A4,BUFFER
		JBE	gl1
		DEC	A4
		PUSH	A2
		MOV	A2,(XX)
		SUB	A2,$0100
		MOV	(XX),A2
		MOVI	A0,4
		MOV	A1,32
		INT	4
		POP	A2
		JMP	gl1
gl2:		JSR	STOSB
		CMP.B A0,13
		JZ    gl1e
		CMP	A4,BUFEND
		JZ	gl3
		JSR	CHROUT
		JMP	GL1
gl3:		
		DEC	A4
		JMP	GL1
GL1E:		
		JSR	CHROUT
		MOV	A1,A4
		SUB	A1,BUFFER
		DEC	A1
		MOV.B	(BUF_CNT),A1
		POP	A1
		MOV	A3,A4
		RET
		
FNDLN:	
		OR	A1,A1
		JP	FND1
		JMP	QHOW
FND1:	
		MOV	A3,TXTBGN
FNDLNP:
FL1:
		PUSH	A1
		MOV	A1,(TXTUNF)
		DEC	A1
		CMP	A1,A3
		POP	A1
		JC	RET13
		MOV	A4,A3
		JSR	LODSW
		CMP	A0,A1
		JC	FL2
RET13:
		RET

FNDNXT:	
		INC	A3
FL2:
		INC	A3
FNDSKP:
		MOV	A4,A3
		JSR	LODSB
		CMP.B	A0,13
		JNZ	FL2
		INC	A3
		JMP	FL1


; ----  CHROUT
CRLF:
		MOVI	A0,$0D
CHROUT:	
		CMP.B	(OCSW),0
		JZ	COUT1
		PUSH	A0
		CMP.B	A0,$0D
		JZ	CR_SCRL
		PUSH	A1
		PUSH 	A2
		MOV	A1,A0
		MOV	A2,(XX)
		MOV	A0,4
		INT	4
		ADD	A2,$0100
		MOV	(XX),A2
		POP	A2
		POP	A1
		POP	A0
		RET

CR_SCRL:	MOV	a0,6
		INT	4
		MOV.B	(XX),0
		POP	A0
		RET
COUT1:	
		cmp.b	a0,0
		jz	ret16
		JSR   STOSB
		PUSH	A0
		mov.b	a0,(BUF_CNT)
		inc	a0
		mov.B	(BUF_CNT),a0
		POP	A0
ret16:
		RET

CHKIO:
	PUSH	A2
	PUSH	A3
	PUSH	A1
	MOVI	A0,0
	INT	4           ; Get keyboard code
	BTST	A0,1        ; if availiable
	JNZ	CI1
	JMP	IDONE
CI1:	
	MOV	A0,A1
	CMP.B	A0,27
	JNZ	IDONE
	JMP	RSTART
IDONE:
	POP	A1
	POP	A3
	POP	A2
	RET

PRTSTG:     
	MOVHL	A2,A0
PS1:
	MOV	A4,A3
	JSR	LODSB
	PUSH	SR
	INC	A3
	POP	SR
	SWAP	A2
	CMP.B	A0,A2
	SWAP	A2
	JNZ	PS2
	RET
PS2:
	JSR	CHROUT
	CMP.B	A0,13
	JNZ	PS1
	RET	

QTSTG:
	MOVHL	A0,34
	JSR	IGNBLNK
	JNZ	QT3
	MOV.B	A0,34
QT1:
	JSR	PRTSTG
	CMP.B	A0,13
	POP	A1
	JNZ	QT2
	JMP	RUNNXL
QT2:
	INC	A1
	INC	A1
	JMP	A1
QT3:
	MOVHL	A0,39
	JSR	IGNBLNK
	JNZ	QT4
	MOV.B	A0,39
	JMP	QT1
QT4:
	MOVHL	A0,92
	JSR	IGNBLNK
	JNZ	QT5
	MOV.B	A0,$0D
	JSR	CHROUT
	JSR	CHROUT
	POP	A1
	JMP	QT2
QT5:
	RET

	;---------  DISPLAY NUMBER -----
PRTNUM:	
	PUSH	A3
	MOVI	A3,10	
	PUSH	A3
	SWAP	A3
	MOVHL	A2,A3
	SWAP	A3
	DEC 	A2
	JSR	CHKSGN
	JP	PN1
	MOVHL	A2,'-'
	DEC	A2
PN1:
	PUSH	A2
PN2:
	JSR	DIVIDE
	OR	A2,A2
	JZ	PN3
	POP	A0
	PUSH	A1
	DEC	A0
	PUSH	A0
	MOV	A1,A2
	JMP	PN2
PN3:
	POP	A2
PN4:
	DEC	A2
	MOV.B	A0,A2
	OR.B	A0,A0
	JZ	PN5
	MOV.B	A0,32
	JSR	CHROUT
	JMP	PN4
PN5:
	MOVLH	A0,A2
	JSR	CHROUT
	MOV.B	A3,A1
PN6:
	MOV.B	A0,A3
	CMP.B	A0,10
	POP	A3
	JZ	RET14
	ADD.B	A0,48
	JSR	CHROUT
	JMP	PN6

PRTLN:
	MOV	A4,A3
	JSR	LODSW
	MOV	A1,A0
	INC	A3
	INC	A3
PRTLN1:
	MOV.B	A2,5
	JSR	PRTNUM
	MOV.B	A0,32
	JSR	CHROUT
	SUB.B	A0,A0
	JSR	PRTSTG
RET14:
	RET

;---------- MVUP MVDOWN

MVUP:
	CMP	A3,A1
	JZ	RET15
	MOV	A4,A3
	JSR	LODSB
	MOV	A4,A2
	JSR	STOSB
	INC	A3
	INC	A2
	JMP	MVUP

MVDOWN:
	CMP	A3,A2
	JZ	RET15
MD1:
	DEC	A3
	DEC	A1
	MOV	A4,A3
	JSR	LODSB
	MOV.B	(A1),A0
	JMP	MVDOWN

_POPA:
	POP	A2
	POP	A1
	MOV	(LOPVAR),A1
	OR	A1,A1
	JZ	PP1
	POP	A1
	MOV	(LOPINC),A1
	POP	A1
	MOV	(LOPLMT),A1
	POP	A1
	MOV	(LOPLN),A1
	POP	A1
	MOV	(LOPPT),A1
PP1:
	PUSH	A2
RET15:
	RET

_PUSHA:
	MOV	A1,STKLMT
	JSR	CHGSGN
	POP	A2
	GETSP	A0
	ADD	A1,A0
	JC	PUSHB
	JMP	QSORRY
PUSHB:
	MOV	A1,(LOPVAR)
	OR	A1,A1
	JZ	PU1
	MOV	A1,(LOPPT)
	PUSH	A1
	MOV	A1,(LOPLN)
	PUSH	A1
	MOV	A1,(LOPLMT)
	PUSH	A1
	MOV	A1,(LOPINC)
	PUSH	A1
	MOV	A1,(LOPVAR)
PU1:
	PUSH	A1
	PUSH	A2
	RET

;----------- ignblnk ---------

IGNBLNK:
		mov	a4,a3
ign1:
		JSR	LODSB
		cmp.b	a0,32
		jnz	ign2
		inc	a3
		jmp	ign1
ign2:
		SWAP	A0
		cmphl	a0
		SWAP	A0
		jnz	_ret
		push	sr
		inc	a3
		pop	sr
_ret:		ret
		

FINISH:
	;POP	A0
	JSR	FIN
	JMP	QWHAT

;--------------------------------

STOSB:	PUSH	SR
		MOV.B	(A4),A0
		INC	A4
		POP	SR
		RET
LODSB:	PUSH	SR
		MOV.B	A0,(A4)
		INC	A4
		POP	SR
		RET
STOSW:	PUSH	SR
		btst	a4,0
		jnz	stow1
		MOV	(A4),A0
		INC	A4
		INC	A4
		jmp	stowe
stow1:	swap	A0
		mov.b	(a4),a0
		inc	a4
		swap	a0
		mov.b	(a4),a0
		inc	a4
stowe:	POP	SR
		RET
LODSW:	PUSH	SR
		btst	a4,0
		jnz	lodw1
		MOV	A0,(A4)
		INC	A4
		INC	A4
		jmp	lodwe
lodw1:	mov.b	a0,(a4)
		swap	a0
		inc	a4
		mov.b	a0,(a4)
		inc	a4
lodwe:	POP	SR
		RET


;-----------------------------------------------------
; DATA
OCSW		DB	$FF


CURRNT	DW	0
STKGOS	DW	0
VARNXT	DW	0
STKINP	DW	0
LOPVAR	DW	0
LOPINC	DW	0
LOPLMT	DW	0
LOPLN		DW	0
LOPPT		DW	0
RANPNT	DW	0

TXTUNF	DA    TXTBGN
		DW	0,0
TXTBGN:	
		DS	$C00
TXTEND:	DW	0

BUF_ALING:
BUF_MAX	DB	$80
BUF_CNT	DB	0  ; MUST BE BEFOR BUFFER
BUFFER:	
		DS	$80
BUFEND	DW	0

VARBGN	DS	54

STKLMT:	
		DS	$260
STACK:	DW	0



