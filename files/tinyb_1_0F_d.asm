;*       Tiny Basic port for Lion cpu/System
;*
;*         ported by Theodoulos Liontakis 2016
;*
;*          from  michael sullivan's 8086 port of
;*                               
;*                   Li-Chen Wang's
;*
;*                   8080 tiny basic 
;*
;* @copyleft
;* all wrongs reserved
;*
		ORG     8192   ;Ram reserved for rom routines
SDCBUF1	DS	514
SDCBUF2	DS	514
SDFLAG	DW	0
COUNTER     DW	0 ; Counter for general use increased by hardware int 0 
NM1:		DW	0
NM2:		DW	0 
FRAC1		DW	0 ; for fixed point multiplication - division
FRAC2		DW	0 ;

; RAM program ENTRY POINT

START:	CLI
		MOV	A1,STACK 
		SETSP	A1
		JSR	CLRMEM
		STI
		SETI		30 
		MOV		A1,61152 
COLINIT:	MOV.B		(A1),196
		INC		A1
		JMPI		COLINIT
		;MOV.B	(A1),45  ; Set line 26 color
		MOV	(XX),$001E ; Set INITIAL POS 
		MOV	A3,TITLE
		MOVI	A2,0
		MOVI	A0,0
		JSR	PRTSTG
		MOV	A3,TXTBGN
		MOV	A4,A3
		MOV	(TXTUNF),A3

RSTART:	MOV	A0,STACK
		SETSP	A0
		MOVI	A1,0
		MOV	(LOPVAR),A1
		MOV	(STKGOS),A1
		MOV	(CURRNT),A1
		JSR	CRLF
		MOV   A3,OK 
		MOVI	A0,0
		JSR	prtstg
ST3:
		MOV	(XX),$001E
		MOVHL	A0,0
		MOV.B	A0,'>'
		JSR	GETLN
		PUSH	A4         ; A4 end of text in buffer
		MOV 	A3,BUFFER
		JSR	TSTNUM
		MOVHL	A0,0
		JSR	IGNBLNK
		OR	A1,A1      ; A1 num 
		POP	A2
		JZ	DIRECT
		;DEC	A3
		;DEC	A3
		SUBI	A3,2
		MOV	A0,A1
		MOV	A4,A3
		JSR	STOSW  ; store lineno to 
		PUSH	A2
		PUSH  A3
		MOV	A0,A2
		SUB	A0,A3
		PUSH	A0
		JSR	FNDLN
		PUSH	A3
		JNZ	ST4
		PUSH	A3
		JSR	FNDNXT

		POP	A2
		MOV	A1,(TXTUNF)
		JSR	MVUP
		MOV	A1,A2
		MOV	(TXTUNF),A1
ST4:		
		POP	A2
		MOV	A1,(TXTUNF)

		POP	A0
		PUSH	A1
		CMP.B	A0,3
		JZ	RSTART
		ADD	A0,A1
		MOV	A1,A0	
		MOV	A3,TXTEND
		CMP	A1,A3
		JNC	QSORRY
		MOV	(TXTUNF),A1
		POP	A3
		JSR	MVDOWN
		POP	A3
		POP	A1
		JSR	MVUP
		JMP	ST3

TSTV:		
		MOVHL	A0,64
		JSR	IGNBLNK
		JC	RET01
TSTV1:	
		JNZ	TV1
		JSR	PARN
		SLL	A1,2
		PUSH	A3
		XCHG	A1,A3
		JSR	SIZE
		CMP	A1,A3
		JC	ASORRY
		MOV 	A1,TXTEND
		SUB	A1,A3
		POP	A3
RET01:	
		RET

TV1:		CMP.B	A0,'Z'  ; TEST VARIABLE
		JA	RET22
		CMP.B	A0,'A'
		JC	RET2
		INC	A3
TV1A:	
		MOV	A1,VARBGN
		SUB.B	A0,65
		AND	A0,$00FF
		SLL	A0,2
		ADD	A1,A0
RET2:		
		RET	
RET22:	
		CMP.B	A0,255
		RET

;----- TSTNUM

TSTNUM:
		MOVI	A1,0
		MOV	(NUM1),0
		MOVHL	A2,A1
		MOVHL	A0,0
		JSR	IGNBLNK
TN1:
		CMP.B	A0,'.'
		JZ	DECIM
		CMP.B	A0,'0'
		JC	RET2
		CMP.B A0,':'
		JNC	RET2
		ADD	A2,$0100
		PUSH	A2
		MOVI	A2,10
		MULU	A1,A2
		MOVI	A0,0
            MOV.B	A0,(A3)
		SUB.B	A0,'0'
		MOVHL	A0,0
		ADD	A1,A0
		POP	A2
		PUSH	SR
		INC	A3
		POP	SR
		MOV.B A0,(A3)
		JP	TN1
QHOW:
		PUSH	A3
AHOW:	
		MOV	A3,HOW
		JMP	ERROR

DECIM:	PUSH	A1
		PUSH	A2
		PUSH	A4
		MOVI	A4,1
		MOVI	A1,0
		MOVI	A0,0
TN2:		INC	A3
		MOV.B	A0,(A3)
		CMP.B	A0,'0'
		JC	DRET
		CMP.B A0,':'
		JNC	DRET
		MOVI	A2,10
		MULU	A1,A2
		SUB.B	A0,'0'
		MOVI	A2,10
		MULU	A4,A2
		ADD	A1,A0
		JP	TN2	
		JMP	QHOW
DRET:		MOVI	A2,0
		MOVI	A0,15
DTOB2:	OR	A0,A0
		JZ	DTOBEND
		SLL	A1,1
		CMP	A1,A4
		JC	DTOB1
		SLL	A2,1
		BSET	A2,0
		DEC	A0
		SUB	A1,A4
		JNZ	DTOB2
		JMP	DTOBEND
DTOB1:	DEC	A0
		SLL	A2,1
		OR	A1,A1
		JNZ	DTOB2	
DTOBEND:	;OR	A0,A0
		;JZ	DTOB3
		SETI	A0
DTOB4:	SLL	A2,1
		JMPI	DTOB4
DTOB3:	MOV	(NUM1),A2
		POP	A4
		POP	A2
		POP	A1
		RET

;--------  tables ----
tab1:	
	TEXT	"LIS"
	DB	'T'+128
	DA	LIST
	TEXT	"NE"
	DB	'W'+128
	DA	NEW
	TEXT	"RU"
	DB	'N'+128
	DA	RUN
	TEXT	"BY"
	DB	'E'+128
	DA	NEW
	TEXT	"SLIS"
	DB	'T'+128
	DA	SLIST
	TEXT  "LOA"
	DB	'D'+128
	DA	LOAD
	TEXT  "SAV"
	DB	'E'+128
	DA	SAVE
TAB2	TEXT	"NEX"
	DB	'T'+128
	DA	NEXT
	TEXT	"LE"
	DB	'T'+128
	DA	LET
	TEXT	"OU"
	DB	'T'+128
	DA	OUTCMD
	TEXT	"I"
	DB	'F'+128
	DA	IFF
	TEXT	"GOT"
	DB	'O'+128
	DA	GOTO
	TEXT	"GOSU"
	DB	'B'+128
	DA	GOSUB
	TEXT	"RETUR"
	DB	'N'+128
	DA	RETURN
	TEXT	"RE"
	DB	'M'+128
	DA	REM
	TEXT	"FO"
	DB	'R'+128
	DA	FOR
	TEXT "FIN"
	DB	'D'+128
	DA	FIND
	TEXT	"INPU"
	DB	'T'+128
	DA	INPUT
	TEXT	"PRIN"
	DB	'T'+128
	DA	PRINT
	TEXT	"POK"
	DB	'E'+128
	DA	POKE
	TEXT	"STO"
	DB	'P'+128
	DA	STOP
	TEXT	"COLO"
	DB	'R'+128
	DA	COLOR
	TEXT	"BEE"
	DB	'P'+128
	DA	BEEP
	TEXT	"CL"
	DB	'S'+128
	DA	CLS
	TEXT	"PO"
	DB	'S'+128
      DA	ATCMD
      TEXT	"PLO"
	DB	'T'+128
	DA	PLOT
	DB	'?'+128
	DA	PRINT
	DB 	128
	DA	DEFLT

TAB4	TEXT	"RN"
	DB	'D'+128
	DA	RND
	TEXT	"IN"
	DB	'P'+128
	DA	INP
	TEXT	"PEE"
	DB	'K'+128
	DA	PEEK
	TEXT	"US"
	DB	'R'+128
	DA	USR
	TEXT	"AB"
	DB	'S'+128
	DA	MYABS
	TEXT	"IN"
	DB	'T'+128
	DA	TOINT
	TEXT	"ROUN"
	DB	'D'+128
	DA	ROUND
	TEXT	"SIZ"
	DB	'E'+128
	DA	SIZE
	TEXT	"SI"
	DB	'N'+128
	DA	SIN
	TEXT	"CO"
	DB	'S'+128
	DA	COS
	TEXT	"P"
	DB	'I'+128
	DA	PI
	TEXT	"SQR"
	DB	'T'+128
	DA	SQRT
	TEXT	"EX"
	DB	'P'+128
	DA	EXPO
	TEXT	"L"
	DB	'N'+128
	DA	LN
	TEXT	"WAIT"
	DB	'K'+128
	DA	WAITK
	TEXT	"SDINI"
	DB	'T'+128
	DA	SDINIT
	TEXT	"SREA"
	DB	'D'+128
	DA	SDREAD
	TEXT	"SWRIT"
	DB	'E'+128
	DA	SWRITE
	TEXT  "TIME"
	DB	'R'+128
	DA	TIMER
	DB	128
	DA	XP40

TAB5	DB	'T', 'O'+128
	DA	FR1
	DB	128
	DA	QWHAT

TAB6	TEXT	"STE"
	DB	'P'+128
	DA	FR2
	DB	128
	DA	FR3
TAB8	DB	'>'
	DB 	'='+128
	DA	XP11
	DB	'#'+128
	DA	XP12
	DB	'>'+128
	DA	XP13
	DB	'='+128
	DA	XP15
	DB	'<'
	DB	'='+128
	DA	XP14
	DB	'<'+128
	DA	XP16
	DB	128	
	DA	XP17



DIRECT:
	MOV	A1,TAB1
	DEC	A1
EXEC:	
	MOVHL	A0,0
	JSR	IGNBLNK
	PUSH	A3
	MOV	A4,A3
EX1:
	MOV.B	A0,(A3)
	INC	A3
	;INC	A4
	MOV	A4,A3
	CMP.B	A0,'.'   
	JZ	EX4
	INC	A1
	mov.b	a4,(a1)
	BCLR	A4,7
	cmp.b	a4,a0
	mov	a4,a3
	JZ	EX2
EX0A:
	CMP.B	(A1),128
	JNC	EX0B
	INC	A1
	JMP	EX0A
EX0B:
	ADDI	A1,3
	BTST	A1,0
	JZ	ALI2
	INC	A1
ALI2: CMP.B (A1),128
	JZ	EX3A
	DEC	A1
	POP	A3
	JMP	EXEC
EX4:
	INC	A1
	CMP.B	(A1),128
	JC	EX4
	JMP	EX3
EX3A:
	POP	A4
	PUSH	A4
	JMP	EX3
EX2:
	CMP.B	(A1),128
	JC	EX1
EX3:
	INC	A1
	BTST	A1,0   ; ALIGN TO EVEN ADDRESS
	JZ	ALIG
	INC	A1
ALIG:	POP	A0
	MOV	A3,A4	
	JMP 	(A1)
;--------------------

NEW:
	JMP	START

STOP:
	JSR	ENDCHK
	JMP	RSTART

RUN:
	JSR	ENDCHK
	MOV	A3,TXTBGN

RUNNXL:
	MOVI	A1,0
	JSR	FNDLNP
	JNC	RUNTSL
	JMP	RSTART

RUNTSL:
	XCHG	A1,A3
	MOV	(CURRNT),A1
	XCHG	A1,A3
	ADDI	A3,2
RUNSML:
	JSR	CHKIO
	MOV	A1,TAB2
	DEC	A1
	JMP	EXEC

GOTO:
	JSR	EXP
	PUSH	A3
	JSR	ENDCHK
	JSR	FNDLN
	JNZ	AHOW
	POP	A0
	JMP	RUNTSL

; ----------- LIST 
SLIST:
	MOV.B	(SER),1  ; REDIRECT TO SERIAL PORT

LIST:
	JSR	TSTNUM
	JSR	ENDCHK
	JSR	FNDLN
LS1:
	JNC	LS2
	MOV.B	(SER),0
	JMP	RSTART
LS2:
	JSR	PRTLN
	JSR	CHKIO
	JSR	FNDLNP
	JMP	LS1

FIND:
	JSR	TSTNUM
	JSR	ENDCHK
	JSR	FNDLN
	JC	RSTART
	JSR	PRTLN
	JMP	ST3


PRINT:
	MOVI.B A2,3
	MOVHL	A0,59
	JSR	IGNBLNK
	JNZ	PR2
	JSR	CRLF
	JMP	RUNSML
PR2:
	MOVHL	A0,13
	JSR	IGNBLNK
	JNZ	PR0
	JSR	CRLF
	JMP	RUNNXL
PR0:	
	MOVHL	A0,'#'
	JSR	IGNBLNK
	JNZ	PR1
	JSR	EXP
	MOV.B	A2,A1
	JMP	PR3
PR1:
	JSR	QTSTG
	JMP	PR8
PR3:
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	PR6
	JSR	FIN
	JMP	PR0
PR6:
	MOVHL	A0,'\'
	JSR	IGNBLNK
	JZ	FINISH
	JSR	CRLF
	JMP	FINISH
PR8:
	JSR	EXP
	PUSH	A2
	JSR	PRTNUM
	MOV	A1,(NUM2)
	OR	A1,A1
	JZ	PR9
	MOV.B	A0,'.'
	JSR	CHROUT
	JSR	FRACTION
PR9:	POP	A2
	JMP	PR3

FRACTION:
	PUSH	A3
	PUSH	A4
	MOVI	A4,0
	MOV	A3,20000
	SETI	15
FRA1:	BTST	A1,15
	JZ	FRA2
	ADD	A4,A3
FRA2:	SRL	A3,1
	SLL	A1,1
	JMPI	FRA1
	MOV	A1,A4
	SRL	A1,2
	MOVI	A2,3
	JSR	PRTUNUM
	POP	A4
	POP	A3
	RET

;--------------  GOSUB

GOSUB:
	JSR	PUSHA
	JSR	EXP
	PUSH	A3
	JSR	FNDLN
	JNZ	AHOW
	MOV	A1,(CURRNT)
	PUSH	A1
	MOV	A1,(STKGOS)
	PUSH	A1
	MOVI	A1,0
	MOV	(LOPVAR),A1
	GETSP	A0
	ADD	A1,A0
	MOV	(STKGOS),A1
	JMP	RUNTSL

RETURN:
	JSR	ENDCHK
	MOV	A1,(STKGOS)
	OR	A1,A1
	JZ	QWHAT
	SETSP	A1
	POP	A1
	MOV	(STKGOS),A1
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
	JSR	POPA
	JMP 	FINISH

; ----------for

FOR:	JSR	PUSHA
	JSR	SETVAL
	DEC	A1
	MOV	(LOPVAR),A1
	MOV	A1,TAB5
	DEC	A1
	JMP	EXEC
FR1:
	JSR	EXP
	MOV	(LOPLMT),A1
	MOV	A1,TAB6
	DEC	A1
	JMP	EXEC
FR2:
	JSR	EXP
	JMP	FR4
FR3:
	MOVI	A1,1
FR4:
	MOV	(LOPINC),A1
FR5:
	MOV	A1,(CURRNT)
	MOV	(LOPLN),A1
	XCHG	A1,A3
	MOV	(LOPPT),A1
	MOVI	A2,10
	MOV	A1,(LOPVAR)
	XCHG	A3,A1
	MOV	A1,A2
	GETSP	A0
	ADD	A1,A0
	JMP	FR7A
FR7:
	ADD	A1,A2
FR7A:
	MOVHL	A0,(A1)
	INC	A1
	MOV.B	A0,(A1)
	DEC	A1
	OR	A0,A0
	JZ	FR8
	CMP	A0,A3
	JNZ	FR7
	XCHG	A3,A1
	MOVI	A1,0
	GETSP	A0
	ADD	A1,A0
	MOV	A2,A1
	MOVI	A1,10
	ADD	A1,A3
	JSR	MVDOWN
	SETSP	A1
FR8:
	MOV	A1,(LOPPT)
	XCHG	A1,A3
	JMP 	FINISH
NEXT:
	JSR	TSTV
	JC	QWHAT
	MOV	(VARNXT),A1
NX0:
	PUSH	A3
	XCHG	A3,A1
	MOV	A1,(LOPVAR)
	MOVLH	A0,A1
	OR.B	A0,A1
	JZ	AWHAT
	CMP	A3,A1
	JZ	NX3
	POP	A3
	JSR	POPA
	MOV	A1,(VARNXT)
	JMP	NX0
NX3:
	MOVHL	A3,(A1)
	INC	A1
	MOV.B	A3,(A1)
	MOV	A1,(LOPINC)
	PUSH	A1
	ADD	A1,A3
	XCHG	A3,A1
	MOV	A1,(LOPVAR)
	SWAP	A3
	MOV.B	(A1),A3
	INC	A1
	SWAP 	A3
	MOV.B	(A1),A3
	MOV	A1,(LOPLMT)
	POP	A0
	SWAP	A0
	OR 	A0,A0
	JP	NX1
	XCHG	A1,A3
NX1:
	JSR	CKHLDE
	POP	A3
	JC	NX2
	MOV	A1,(LOPLN)
	MOV	(CURRNT),A1
	MOV	A1,(LOPPT)
	XCHG	A3,A1
	JMP 	FINISH
NX2:
	JSR	POPA
	JMP 	FINISH	

; ------------ EXPRES

SIZE:
	PUSH	A3
	MOV	A3,(TXTUNF)
	MOV	A1,TXTEND  ;VARBGN
	SUB	A1,A3
	POP	A3
RET10:
	RET

; ------------ DIVIDE

DIVIDE:  ; INT 4/9 Div A2 by A1 res in A1,A0
	MOV	A2,A1
	MOV	A1,A3
	MOVI	A0,9
	INT	4
	MOV	A2,A1
	XCHG	A0,A1
	RET
	
DIVIDE2:  ; INT 5/1 Div A2 by A1 res in A1,A0
	MOV	A2,A1
	MOV	A1,A3
	MOVI	A0,1
	INT	5
	MOV	A2,A1
	XCHG	A0,A1
	RET

CHKSGN:
	OR	A1,A1
	JP	RET11
CHGSGN:
	PUSH	A0
	MOV	A0,(NUM2)
	NOT	A0
	NOT	A1
	INC	A0
	ADC	A1,0
	MOV	(NUM2),A0
	POP	A0
	XOR	A2,$8000
RET11:
	RET

CKHLDE:
	MOV	A0,A1
	XOR	A0,A3
	JP	CK1
	XCHG	A3,A1
CK1:	CMP	A1,A3
	JNZ   CK2
	MOV	A0,(NUM2)
	BTST	A1,15
	JZ	CK3
	NOT	A4
	INC	A4
CK3:	BTST	A3,15
	JZ	CK4
	NOT	A0
	INC	A0
CK4:	;MOV	(NUM2),A0
	CMP	A4,A0 ;(NUM2)
CK2:	RET

;---- GETVAL FIN

SETVAL:
	JSR	TSTV
	JC	QWHAT
	PUSH	A1
	MOVHL	A0,'='
	JSR	IGNBLNK
	JNZ	QWHAT
	JSR	EXP
	MOV	A2,A1
	POP	A1
	MOV	(A1),A2
	ADDI	A1,2
	MOV	(A1),(NUM2)
	DEC	A1
	RET

FIN:
	MOVHL	A0,59
	JSR	IGNBLNK
	JNZ	FI1
	POP	A0
	JMP	RUNSML
FI1:
	MOVHL	A0,13
	JSR	IGNBLNK
	JNZ	FI2
	POP	A0
	JMP	RUNNXL
FI2:
	RET

ENDCHK:
	MOVHL	A0,13
	JSR	IGNBLNK
	JZ	FI2
QWHAT:
	PUSH	A3
AWHAT:
	MOV	A3,WHAT
ERROR:
	SUB.B	A0,A0
	JSR	PRTSTG
	POP	A3
	MOV	A1,(CURRNT)
	CMP	A1,0
	JZ	RSTART
	JN	INPERR
	MOV	A4,A1
	JSR	LODSW
	JSR	FNDLN
	MOV	A3,A1
	JSR	PRTLN
	POP	A2
ERR2:
	JMP	RSTART
QSORRY:
	PUSH	A3
ASORRY:
	MOV	A3,SORRY
	JMP	ERROR
;-----

REM:
	MOVI	A1,0
	JMP	IFF1A

IFF:
	JSR	EXP
IFF1A:
	CMP	A1,0
	JNZ	RUNSML
	JSR	FNDSKP
	JNC	RUNTSL
	JMP	RSTART

INPERR:
	MOV	A1,(STKINP)
	CLI
	SETSP	A1
	STI
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
	POP	A3

INPUT:

	PUSH	A3
	JSR	QTSTG
	JMP	IP2
	JSR	TSTV
	JC	IP4
	JMP	IP3
IP2:
	PUSH	A3
	JSR	TSTV
	JC	QWHAT
	MOV.B A0,(A3)
	MOV.B	A2,A0
	SUB.B	A0,A0
	MOV.B	(A3),A0
	POP	A3
	JSR	PRTSTG
	MOV.B	A0,A2
	DEC	A3
	MOV.B	(A3),A0
IP3:
	PUSH	A3
	XCHG	A1,A3
	MOV	A1,(CURRNT)
	PUSH	A1
	MOV	(CURRNT),-999
	GETSP	A0
	MOV	(STKINP),A0
	PUSH	A3
	MOV.B	A0,':'
	JSR	GETLN
IP3A:
	MOV	A3,BUFFER
	JSR	EXP
	NOP              ;jsr	endchk
	NOP
	NOP
	POP	A3
	XCHG	A1,A3
	SWAP	A3
	MOV.B	(A1),A3
	SWAP	A3
	INC	A1
	MOV.B	(A1),A3
	POP	A1
	MOV	(CURRNT),A1
	POP	A3
IP4:
	POP	A0
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	FINISH
	JMP	INPUT
	

DEFLT:
	MOV.B	A0,(A3)
	CMP.B	A0,13
	JZ	FINISH
LET:
	JSR	SETVAL
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	FINISH
	JMP	LET

;-----
EXP:	MOV	(NUM2),0
	JSR	EXPR2
	MOV	A4,(NUM2) ;********************
	PUSH	A1
	PUSH	A4
	
EXPR1:
	MOV	A1,TAB8
	DEC	A1
	JMP 	EXEC
XP11:
	JSR	XP18
	JC	RET4
	MOV.B	A1,A0
	RET
XP12:
	JSR	XP18
	JZ	RET4
	MOV.B	A1,A0
RET4:
	RET
XP13:
	JSR	XP18
	JBE	RET5
	MOV.B	A1,A0
RET5:
	RET
XP14:
	JSR	XP18
	MOV.B	A1,A0
	JBE	RET6
	MOVLH	A1,A1
RET6:
	RET
XP15:
	JSR	XP18
	JNZ	RET7
	MOV.B A1,A0
RET7:
	RET
XP16:
	JSR	XP18
	JNC	RET8
	MOV.B	A1,A0
RET8:
	RET
XP17:
	POP	A4
	POP	A1
	MOV	(NUM2),A4 ;*************
	RET
XP18:
	MOV.B	A0,A2
	POP	A1
	POP	A4
	POP	A2
	PUSH	A1
	PUSH	A2
	PUSH	A4
	MOV.B	A2,A0
	JSR	EXPR2
	XCHG	A1,A3
	POP	A4
	POP	A0
	PUSH	A1
	MOV	A1,A0
	JSR	CKHLDE
	MOV	(NUM2),0
	POP	A3
	MOVI	A1,0
	MOVI.B A0,1
	RET

EXPR2:
	MOVHL	A0,'-'
	JSR	IGNBLNK
	JNZ	XP21
	MOVI	A1,0
	JMP	XP26
XP21:
	MOVHL	A0,'+'
	JSR	IGNBLNK
XP22:
	JSR	EXPR3
XP23:
	MOVHL	A0,'+'
	JSR	IGNBLNK
	JNZ	XP25
	PUSH	A1
	MOV	A4,(NUM2)
	PUSH	A4
	JSR	EXPR3
XP24:
	XCHG	A1,A3
	POPI
	POP	A0
	PUSH	A1
	MOV	A1,A0
	MOV	A0,(NUM2)
	MOVIDX A4	
	ADD	A4,A0
	ADC	A1,A3
	MOV	(NUM2),A4
	POP	A3
	JO	QHOW
	JMP	XP23
XP25:
	MOVHL	A0,'-'
	JSR	IGNBLNK
	JNZ	RET9
XP26:
	PUSH	A1
	MOV	A4,(NUM2)
	PUSH	A4
	JSR	EXPR3
	JSR	CHGSGN
	JMP	XP24

EXPR3:
	JSR	EXPR4
XP31:
	MOVHL	A0,'*'
	JSR	IGNBLNK
	JNZ	XP34
	PUSH	A1
	MOV	A4,(NUM2)
	PUSH	A4
	JSR	EXPR4
	XCHG	A1,A3
	POP	A4
	POP	A0
	PUSH	A1
	PUSH	A0
	PUSH	A2
	MOV	(FRAC2),A4
	MOV	A4,(NUM2)
	MOV	(FRAC1),A4
	MOV	A1,A3
	MOV	A2,A0
	MOVI	A0,0   ;
	INT	5      ; Multiplcation A1*A2 res in A1
	MOV	A4,(FRAC1)
	MOV	(NUM2),A4
	CMP	A0,0   ; check overflow
	POP	A2
	POP	A0
	JNZ	AHOW
	;JO	AHOW
	JMP	XP35
XP34:
	MOVHL	A0,'/'
	JSR	IGNBLNK
	JNZ	XP44
      PUSH	A1
	MOV	A4,(NUM2)
	PUSH	A4
	JSR	EXPR4
	XCHG	A1,A3
	POP	A4
	POP	A0
	PUSH	A1          ; a3
	MOV	(FRAC2),A4
	MOV	A4,(NUM2)
	MOV	(FRAC1),A4
	MOV	A1,A0           ; dividend
	MOV	A0,A3		   ; divider
	OR	A0,(FRAC1)
	JZ	AHOW
	PUSH	A2
	JSR	DIVIDE2
	MOV	A4,(FRAC1)
	MOV	(NUM2),A4
	MOV	A1,A2
	POP	A2
XP35:
	POP	A3
	JMP	XP31


XP44:
	MOVHL	A0,'%'
	JSR	IGNBLNK
	JNZ	RET9
	PUSH	A1
	JSR	EXPR4
	XCHG	A1,A3
	POP	A0
	PUSH	A1
	MOV	A1,A0
	OR	A3,A3
	JZ	AHOW
	PUSH	A2
	JSR	DIVIDE
	POP	A2
	JMP	XP35



EXPR4:
	MOV	A1,TAB4
	DEC	A1
	JMP	EXEC
XP40:   		
	JSR	TSTV  ; VARIABLE ?
	JC	XP41
	MOV	A0,(A1)
	ADDI	A1,2
	XCHG	A1,A0
	MOV	A4,(A0)
	MOV	(NUM2),A4
RET9:
	RET
XP41:	
	JSR	TSTNUM	; NUMBER ?
	MOVLH A0,A2
	OR.B	A0,A0
	JZ	PARN
	MOV	A4,(NUM1)
	MOV	(NUM2),A4
	RET
PARN:
	MOVHL	A0,'('
	JSR	IGNBLNK
	JNZ	PARN1
	JSR	EXP
PARN1:
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	XP43
XP42:
	RET
XP43:
	JMP	QWHAT

	
MYABS:
	JSR	PARN
	JSR	CHKSGN
	OR	A0,A1
	JP	RET10
	JMP	QHOW

;-----  my ROUTINES

CLUST_SIZE EQU	64

LOAD:
	CMP	(SDFLAG),256
	JNZ	QHOW
	JSR	EXP
	CMP	A1,50
	JA	QWHAT
	OR	A1,A1
	JZ	QWHAT
	PUSH	A3
	PUSH	A2
	PUSH	A1
	JSR	CLRMEM
	MULU.B A1,10
	ADDI	A1,8
	ADD	A1,SDCBUF1
	MOV	A3,(A1)
	MOV	A0,A3
	ADD	A0,TXTBGN
	MOV	(TXTUNF),A0
	POP	A1
	MULU.B A1,CLUST_SIZE
	MOV	A2,TXTBGN
LODLP:
	SETI	30000
LDDL: JMPI	LDDL    ;delay
	INC	A1
	MOV	A0,13
	INT	4
	ADD	A2,512
	SUB	A3,512
	JNC	LODLP
	POP	A2
	POP	A3
	JMP	FINISH

SAVE:	
	CMP	(SDFLAG),256
	JNZ	QHOW	
	JSR	EXP
	CMP	A1,50
	JA	QWHAT
	OR	A1,A1
	JZ	QWHAT
	PUSH	A3
	PUSH	A2
	PUSH	A1
	MULU.B A1,10
	ADDI	A1,8
	ADD	A1,SDCBUF1
	MOV	A2,TXTBGN
	MOV	A3,(TXTUNF)
	SUB	A3,A2
	MOV	(A1),A3
	MOV	A2,SDCBUF1
	MOVI	A0,14
	MOVI	A1,0
	INT	4         ; UPDATE BLOCK 0
	POP	A1
	MULU.B A1,CLUST_SIZE
	MOV	A2,TXTBGN
SAVLP:
	SETI	30000
SVDL: JMPI	SVDL    ;delay
	INC	A1
	MOVI	A0,14
	INT	4        ; WRITE NEXT CLUSTER BLOCK
	ADD	A2,512
	SUB	A3,512
	JNC	SAVLP
	POP	A2
	POP	A3
	JMP	FINISH

CLS:	
	MOVI	A0,3
	INT	4
	JMP	FINISH

ATCMD:
	JSR	EXP
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	PUSH	A1
	JSR	EXP
	MOV.B	A0,A1
	POP	A1
	MOV.B	(XX),A0 
	MOV.B	(YY),A1		
	JMP 	FINISH


COLOR:
	JSR	EXP
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	PUSH	A1
	JSR	EXP
	MOV.B	A0,A1
	POP	A1
	ADD	A1,61152 
	MOV.B	(A1),A0
	JMP 	FINISH

PLOT:
	JSR	EXP
	CMP	A1,383
	JA	FINISH
	PUSH 	A2
	PUSH	A4
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	PUSH	A1
	JSR	EXP
	CMP	A1,247
	JBE	PLT2
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	JSR	EXP
	POP	A1
	JMP	PLTX
PLT2:	PUSH	A1
	MOVHL	A0,44
	MOVI	A4,1
	JSR	IGNBLNK
	JNZ	PLT1
	JSR	EXP
	MOV	A4,A1
PLT1:	POP	A2
	POP	A1
	MOVI	A0,2
	INT	4
PLTX:	POP	A4
	POP	A2
	JMP 	FINISH

BEEP:
	JSR	EXP
	OUT	8,A1
	JMP 	FINISH

POKE:
	JSR	EXP
	PUSH	A1
	MOVHL	A0,44
	JSR	IGNBLNK
	JZ	POK1
	JMP	QWHAT
POK1:
	JSR	EXP
	MOV.B	A0,A1
	POP	A1
	MOV.B	(A1),A0
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	FINISH
	JMP	POKE

PEEK:
	JSR	PARN
	MOV.B	A1,(A1)
	MOVHL	A1,0
	RET

TIMER:
	MOV	A1,(COUNTER)
	BCLR	A1,15
	RET

TOINT:
	JSR	PARN
	BTST	A1,15
	JZ	TOI1
	INC	A1
TOI1:	MOV	(NUM2),0
	RET

ROUND:
	JSR	PARN
	MOV	A0,(NUM2)
	ADD	A0,$8000
	ADC	A1,0
	MOV	(NUM2),0
	RET

RND:	JSR	PARN
	OR	A1,A1
	JN	QHOW
	JNZ	RND1
	MOVI	A1,0
	RET
RND1:	
	PUSH	A2
	MOV	A0,(COUNTER)
	MOVI	A2,13
	MULU.B A2,A0
	MOVI	A0,9
	INT	4
	POP	A2
	MOV	A1,A0
	INC	A1
	RET

PI:	MOVI	A1,3
	MOV	(NUM2),$2439
	RET


SQRT: PUSH	A2
	PUSH	A4
	PUSH	A0
	JSR	PARN
	MOV	A0,(NUM2)  	

	POP	A0
	POP	A4
	POP	A2
	RET

EXPO:
	RET

LN:	RET


COS:	PUSH	A2
	PUSH	A4
	PUSH	A0
	JSR	PARN
	MOV	A0,(NUM2)
	ADD	A0,$921F	
	ADC	A1,1
	CMP	A1,3
	JRZ	4
	JLE	CSSK
	;CMP	A0,$0200
	;JBE	CSSK
	SUBI	A1,7
	SUB	A0,$487E
	JC	CSSK
	INC	A1
CSSK:
	MOV	(NUM2),A0
	JMP	COSI


SIN:  PUSH	A2
	PUSH	A4
	PUSH	A0
	JSR	PARN

COSI:	PUSH	A3
	MOV	A2,(SINP12)
	MOV	(FRAC2),A2
	MOV	A2,(NUM2)
	MOV	(FRAC1),A2
	MOVI	A2,1   ;(SINP11)
	PUSH	A1                 ; save parameter
	MOVI	A0,0
	INT	5                  ; X*1.27323954
	POP	A0	;get param
	PUSH	A1    ; save res
	MOV	A2,(FRAC1)
	PUSH	A2
	MOV	A1,A0 	; get param again
	PUSH	A1    	; save again
	MOV	A2,(SINP22)
	MOV	(FRAC2),A2
	MOV	A2,(NUM2)
	MOV	(FRAC1),A2
	MOVI	A2,0       ;(SINP21)
	MOVI	A0,0
	INT	5          ; X*0.405284735
	POP	A2
	PUSH	A2           ;  again save 
	MOV	A0,(NUM2)
	MOV	(FRAC2),A0
	MOVI	A0,0        ; X*X*0.405284735
	INT   5       
	MOV	A2,(FRAC1)  ; result in A1A2
	POP	A0 ; get param
	POP	A4 ; first result
	POP	A3
	BTST	A0,15
	JZ   SIN1
	ADD	A2,A4 
	ADC	A1,A3
	JMP	SIN2
SIN1:
	NOT	A1
	NOT	A2
	INC	A2
	ADC	A1,0
	ADD	A2,A4
	ADC	A1,A3
SIN2: MOV	(NUM2),A2
	POP	A3
	POP	A0
	POP	A4
	POP	A2
	RET


WAITK:
	MOVI	A0,0
	INT	4           ; Get keyboard code
	BTST	A0,1        ; if availiable
	JNZ	WK1
	MOVI	A0,7
	INT	4
	BTST	A0,2
	JZ	WAITK
	MOVI	A0,10
	INT	4
WK1:
	RET	


SDINIT:
	MOVI	A0,11
	INT	4
	MOV	A1,A0
	MOV	(SDFLAG),A0
	MOVI	A1,0
	MOVI	A0,13
	PUSH	A2
	MOV	A2,SDCBUF1
	INT	4
	MOV	A1,A0
	POP	A2
	RET

SDREAD:
	JSR	PARN
	MOVI	A0,13
	PUSH	A2
	MOV	A2,SDCBUF2
	INT	4
	MOV	A1,A0
	POP	A2
	RET

SWRITE:
	JSR	PARN
	MOVI	A0,14
	PUSH	A2
	MOV	A2,SDCBUF2
	INT	4
	MOV	A1,A0
	POP	A2
	RET

CLRMEM:	PUSH	A1
		PUSH	A0
		MOV	A1,TXTBGN
		MOV	A0,TXTEND
		SUB	A0,A1
		SRL	A0,1
		DEC	A0
		SETI	A0	
MEMCL:	MOV	(A1),0
		ADDI	A1,2
		JMPI	MEMCL
		MOV	A1,VARBGN
		MOV	A0,STKLMT
		SUB	A0,A1
		SRL	A0,1
		DEC	A0
		SETI	A0	
MEMCL2:	MOV	(A1),0
		ADDI	A1,2
		JMPI	MEMCL2
		POP	A0
		POP	A1
		RET


;----- GETLN

GETLN:
		jsr	chrout
		push	a1
		mov	a4,BUFFER  ; a4<->di
GL1:
		MOVI	A0,0
		INT	4           ; Get keyboard code for serial port
		BTST	A0,1        ; if availiable
		JNZ	KEYIN
		MOVI	A0,7
		INT	4
		BTST	A0,2
		JZ	GL1
		MOVI	A0,10
		INT	4
KEYIN:
		MOV	A0,A1      ; CHAR IN A0
		CMP.B	A0,97
		JC	SKP2
		CMP.B	A0,122
		JA	SKP2
		AND.B	A0,$DF        ; UPPER CASE 
SKP2:	      CMP.B A0,8       ; BS
		JNZ   gl2
		CMP	A4,BUFFER
		JBE	gl1
		DEC	A4
		PUSH	A2
		MOV	A2,(XX)
		SUB	A2,$0100
		MOV	(XX),A2
		MOVI	A0,4
		MOV	A1,32
		INT	4
		POP	A2
		JMP	gl1
gl2:		MOV.B	(A4),A0
		INC	A4
		CMP.B A0,13
		JZ    gl1e
		CMP	A4,BUFEND
		JZ	gl3
		JSR	CHROUT
		JMP	GL1
gl3:		
		DEC	A4
		JMP	GL1
GL1E:		
		JSR	CHROUT
		MOV	A1,A4
		SUB	A1,BUFFER
		POP	A1
		MOV	A3,A4
		RET
		
FNDLN:	
		OR	A1,A1
		JN	QHOW
		MOV	A3,TXTBGN
FNDLNP:
FL1:		
		MOV	A0,(TXTUNF)
		DEC	A0
		CMP	A0,A3
		JC	RET13
		MOV	A4,A3
		JSR	LODSW
		CMP	A0,A1
		JC	FNDNXT
RET13:
		RET

FNDNXT:	
		INC	A3
FL2:
		INC	A3
	
FNDSKP:
		MOV.B	A0,(A3)
		CMP.B	A0,13
		JNZ	FL2
		INC	A3
		JMP	FL1


; ----  CHROUT
CRLF:
		MOVI	A0,$0D
CHROUT:	
		OR.B	A0,A0
		JZ	RET9
		PUSH	A0
		CMP.B	A0,$0D
		JZ	CR_SCRL
		PUSH	A1
		PUSH 	A2
		MOV	A1,A0
		MOV	A2,(XX)
		MOV	A0,4
		CMP.B	(SER),1   ; REDIRECT TO SERIAL ?
		JNZ	NRMI
		MOVI	A0,1
		SETI	10000    ;  DELAY FOR SERIAL TRANSMIT
DLY:		NOP
		JMPI	DLY
NRMI:		INT	4
		SWAP	A2
		CMP.B	A2,62
		JBE	SKP4
		JSR 	CRLF
		MOV	A2,-1	
SKP4:		INC.B	A2
		MOV.B	(XX),A2
		POP	A2
		POP	A1
		POP	A0
		RET

CR_SCRL:	PUSH	A1
		MOV	a0,6
		CMP.B	(SER),1
		JNZ	NRMI2
		SETI	10000    ;  DELAY FOR SERIAL TRANSMIT
DLY3:		NOP
		JMPI	DLY3
		MOVI	A1,13
		MOVI	A0,1
NRMI2:
		INT	4
		CMP.B	(SER),1
		JNZ	SKP3
		SETI	10000    ;  DELAY FOR SERIAL TRANSMIT
DLY2:		NOP
		JMPI	DLY2
		MOVI	A0,1
		MOVI	A1,10
		INT	4
SKP3:		MOV.B	(XX),0
		POP	A1
		POP	A0
		RET

CHKIO:
	PUSH	A2
	PUSH	A3
	PUSH	A1
	MOVI	A0,0
	INT	4           ; Get keyboard code
	BTST	A0,1        ; if availiable
	JNZ	CI1
	MOV	A0,7
	INT	4
	BTST	A0,2
	JZ	IDONE
	MOV	A0,10
	INT	4
CI1:	
	MOV	A0,A1
	CMP.B	A0,27
	JNZ	IDONE
	JMP	RSTART
IDONE:
	POP	A1
	POP	A3
	POP	A2
	RET

PRTSTG:     
	MOVHL	A2,A0
PS1:
	MOV.B A0,(A3)
	INC	A3
	SWAP	A2
	CMP.B	A0,A2
	SWAP	A2
	JNZ	PS2
	RET
PS2:
	JSR	CHROUT
	CMP.B	A0,13
	JNZ	PS1
	RET	

QTSTG:
	MOVHL	A0,34
	JSR	IGNBLNK
	JNZ	QT3
	MOV.B	A0,34
QT1:
	JSR	PRTSTG
	CMP.B	A0,13
	POP	A1
	JNZ	QT2
	JMP	RUNNXL
QT2:
	ADDI	A1,4
	JMP	A1
QT3:
	MOVHL	A0,39
	JSR	IGNBLNK
	JNZ	QT4
	MOV.B	A0,39
	JMP	QT1
QT4:
	MOVHL	A0,92
	JSR	IGNBLNK
	JNZ	QT5
	POP	A1
	JMP	QT2
QT5:
	RET

	;---------  DISPLAY NUMBER -----
PRTUNUM:  ; UNSIGNED
	PUSH	A3
	MOVI	A3,10	
	PUSH	A3
	MOVHH	A2,A3
	MOV	A4,A2
PUN2:
	JSR	DIVIDE
	OR	A2,A2
	JZ	PUN3
	PUSH	A1
	DEC.B	A4
	MOV	A1,A2
	JMP	PUN2
PUN3:
	MOV	A2,A4
PUN4:
	DEC.B	A2
	OR.B	A2,A2 
	JN	PN5
	MOV.B	A0,'0'
	JSR	CHROUT
	JMP	PUN4

PRTNUM:	            ;signed
	PUSH	A3
	MOVI	A3,10	
	PUSH	A3
	MOVHH	A2,A3
	DEC.B	A2
	JSR	CHKSGN
	JP	PN1
	MOVHL	A2,'-'
	DEC.B	A2
PN1:
	MOV	A4,A2
PN2:
	JSR	DIVIDE
	OR	A2,A2
	JZ	PN3
	PUSH	A1
	DEC.B	A4
	MOV	A1,A2
	JMP	PN2
PN3:
	MOV	A2,A4
PN4:
	DEC.B	A2
	OR.B	A2,A2 
	JN	PN5
	MOV.B	A0,32
	JSR	CHROUT
	JMP	PN4
PN5:
	MOVLH	A0,A2
	JSR	CHROUT
	MOV.B	A3,A1
PN6:
	MOV.B	A0,A3
	CMP.B	A0,10
	POP	A3
	JZ	RET14
	ADD.B	A0,48
	JSR	CHROUT
	JMP	PN6

PRTLN:
	MOV	A4,A3
	JSR	LODSW
	MOV	A1,A0
	ADDI	A3,2
PRTLN1:
	MOV.B	A2,4
	JSR	PRTNUM
	MOV.B	A0,32
	JSR	CHROUT
	SUB.B	A0,A0
	JSR	PRTSTG
RET14:
	RET

;---------- MVUP MVDOWN

MVUP:
	CMP	A3,A1
	JZ	RET15
	MOV.B	(A2),(A3)  ; replace 4 lines
	INC	A3
	INC	A2
	JMP	MVUP

MVDOWN:
	CMP	A3,A2
	JZ	RET15
MD1:
	DEC	A3
	DEC	A1
	;MOV	A4,A3
	;JSR	LODSB
	MOV.B (A1),(A3)
	;MOV.B	(A1),A0
	JMP	MVDOWN

POPA:
	POP	A2
	POP	A1
	MOV	(LOPVAR),A1
	OR	A1,A1
	JZ	PP1
	POP	A1
	MOV	(LOPINC),A1
	POP	A1
	MOV	(LOPLMT),A1
	POP	A1
	MOV	(LOPLN),A1
	POP	A1
	MOV	(LOPPT),A1
PP1:	PUSH	A2   ; return address
RET15:
	RET

PUSHA:
	MOV	A1,STKLMT
	JSR	CHGSGN
	POP	A2
	GETSP	A0
	ADD	A1,A0
	JNC	QSORRY

	MOV	A1,(LOPVAR)
	OR	A1,A1
	JZ	PU1
	MOV	A1,(LOPPT)
	PUSH	A1
	MOV	A1,(LOPLN)
	PUSH	A1
	MOV	A1,(LOPLMT)
	PUSH	A1
	MOV	A1,(LOPINC)
	PUSH	A1
	MOV	A1,(LOPVAR)
PU1:
	PUSH	A1
	PUSH	A2
	RET

;----------- ignblnk ---------

IGNBLNK:   ; eat whitespace including a0 high

ign1:
	mov.b	a0,(a3)
	cmp.b	a0,32
	jnz	ign2
	inc	a3
	jmp	ign1
ign2:
	;SWAP	A0
	;cmphl	a0
	;SWAP	A0
	
	swap	a0
	cmp.b	(a3),a0
	swap  a0

	jnz	_ret
	push	sr
	inc	a3
	pop	sr
_ret:	ret
		

FINISH:
	JSR	FIN
	JMP	QWHAT

;--------------------------------

STOSW: ;PUSH	SR
	swap	a0
	mov.b	(a4),a0
	inc	a4
	swap	a0
	mov.b	(a4),a0
	inc	a4
stowe: ;POP	SR
	RET
LODSW: ;PUSH	SR
	movhl	a0,(a4)
	inc	a4
	mov.b	a0,(a4)
	inc	a4
lodwe: ;POP	SR
	RET
;----------ADDED

OUTCMD:
	JSR	EXP
	MOV	A0,OUTIO
	ADDI 	A0,2
	MOV	(A0),A1
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	QWHAT
	JSR	EXP
	JSR	OUTIO
	JMP	FINISH

INP:
	JSR	PARN
	MOV	A0,INPIO
	ADDI	A0,2
	MOV	(A0),A1
	JMP	INPIO

; 'usr(i(,j))'
;
; usr call a machine language subroutine at location 'i'  if
; the optional parameter 'j' is used its value is passed  in
; hl. the value of the function should be returned in hl.

USR:
	PUSH	A2
	MOVHL	A0,'('
	JSR	IGNBLNK
	JNZ	QWHAT
	JSR	EXP
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	PASPRM
	PUSH	A3
	MOV	A3,USRET
	PUSH	A3
	PUSH	A1
	RET
PASPRM:
	MOVHL	A0,44
	JSR	IGNBLNK
	JNZ	USRET1
	PUSH	A1
	JSR	EXP
	MOVHL	A0,')'
	JSR	IGNBLNK
	JNZ	USRET1
	POP	A2
	PUSH	A3
	MOV	A3,USRET
	PUSH	A3
	PUSH	A2
	RET
USRET:
	POP	A3
USRET1:
	POP	A2
	RET

outio:
 	out $FFFF,A1
 	ret

INPIO:
	IN	A1,$FFFF
	RET
;-----------------------------------------------------
; DATA

SINP11	DW	$0001
SINP12	DW	$45F3
SINP21	DW	$0000
SINP22	DW	$67C0

DUMMY		DW	0
XX		DB	0
YY		DB	0
NUM1		DW	0
NUM2		DB	0
NUM2L		DB	0

FNAME       TEXT	"         "
		DB	13
TITLE		TEXT	"Tiny Basic for Lion System 2016"
		DB	13
how		TEXT  "how?"
		DB	$0d
OK		TEXT	"OK"
		DB	13
what		TEXT    "what?"
		DB	$0d
sorry		TEXT    "sorry"
		DB    $0d

SER		DB	0
RAND		DW	$0007
CURRNT	DW	0
STKGOS	DW	0
VARNXT	DW	0
STKINP	DW	0
LOPVAR	DW	0
LOPINC	DW	0
LOPLMT	DW	0
LOPLN		DW	0
LOPPT		DW	0

TXTUNF	DA    TXTBGN
TXTBGN	DS	24000   ; 24K program space
TXTEND	DS	2

BUFFER	DS	102
BUFEND:

VARBGN	DS	120

STKLMT	DS	1800
STACK:	



